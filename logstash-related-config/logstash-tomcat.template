input {
    file {
    	type => "requests"
	    path => ["TOMCAT_SERVER_DIR/logs/localhost_access_log.*.txt"]
    }
    file {
    	type => "exceptions"
    	path => ["TOMCAT_SERVER_DIR/logs/localhost.*.log"]
    }
    udp {
        port => 25826 # default collectd port
        buffer_size => 1452 # default buffer size for collectd
        codec => collectd { } # using default values for the codec
        type => "collectd"
        add_field => {"tag" => "CA_TAG"}
    }
}

filter
{
    if [type] == "requests" {
        grok {
                match => [ "message" , "%{IPORHOST:client} %{DATA} %{DATA:user} \[%{HTTPDATE:logtimestamp}\] \"%{WORD:method} %{URIPATH:uri_path}(%{URIPARAM:uri_params}|) %{DATA:protocol}\" %{NUMBER:code} (%{NUMBER:resptime}|%{DATA})" ]
#		match => [ "message" , "%{IPORHOST:client} %{DATA} %{DATA:user} \[%{TIMESTAMP_ISO8601:logtimestamp}\] \"%{WORD:method} %{URIPATH:uri_path}(%{URIPARAM:params}|) %{DATA:protocol}\" %{NUMBER:code} (%{NUMBER:resptime}|%{DATA})" ]
            }
        mutate {
                rename => ["code", "errcode"]
                add_field => ["tag", "CA_TAG"]
                remove => ["message", "client", "user", "timezone", "method", "protocol", "code", "@version", "path"]
        }
        ruby { code => "event['resptime'] = Float(event['resptime']) / 1000 if event['resptime']" } # convert micros to millis
        ruby { code => "x = event['uri_params'] || ''; i = x.index('action='); event['uri_path'] += '/' + x[(i + 'action='.length)..((x.index('&', i) || 0) - 1)] if i" } # add the action from uri_params to uri_path
    }

    if [type] == "exceptions" {
#        grok {
#            match => [ "message" , "%{HTTPDATE:logtimestamp} \| %{WORD:severity} \| %{DATA}" ]
#        }
        mutate {
#                rename => ["code", "errcode"]
                add_field => ["tag", "CA_TAG"]
#                remove => ["message", "severity", "@version", "path"]
        }
    }
}

output {
    stdout { codec => rubydebug }

    if [type] == "requests" {
        elasticsearch_http {
        	host => "ES_HOST"
	        port => ES_PORT
	        index => "INDEX"
        }
    }

    if [type] == "exceptions" {
        elasticsearch_http {
        	host => "ES_HOST"
	        port => ES_PORT
	        index => "INDEX"
        }
    }
    if [type] == "collectd" {
        elasticsearch_http {
            host => "ES_HOST"
            port => ES_PORT
            index => "INDEX"
        }
    }
}
